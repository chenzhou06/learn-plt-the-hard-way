#+TITLE: Understanding CoCo VM: ~PyStr~
#+AUTHOR: Chen Zhou

* Header file

#+BEGIN_SRC c++ :tangle ./export/PyStr.h
  #ifndef PYSTR_H
  #define PYSTR_H

  class PyObject;                 // TODO: ?

  #include "PyCallable.h"
  #include <string>
  using namespace std;

  class PyStr : public PyObject {
  public:
      PyStr(string s);
      PyStr(const PyStr& orig);
      virtual ~PyStr();
      PyType* getType();
      string toString();
      PyStr* charAt(int index);

  protected:
      string val;

      PyObject* __add__(vector<PyObject*>* args);
      PyObject* __str__(vector<PyObject*>* args);
      PyObject* __float__(vector<PyObject*>* args);
      PyObject* __int__(vector<PyObject*>* args);
      PyObject* __bool__(vector<PyObject*>* args);
      PyObject* __funlist__(vector<PyObject*>* args); // TODO: ?
      PyObject* __eq__(vector<PyObject*>* args);
      PyObject* split(vector<PyObject*>* args);
  };

  #endif
#+END_SRC

The ~PyStr~ class is basically implemented upon C++ string class with several
magic functions added.

- ~__add__~: this method can add two ~PyStr~ objects together;
- ~__str__~: this method should return itself;
  # TODO: Confirm this in cpp file.
- ~__float__~: treat this ~PyStr~ object as a float.
- ~__int__~: treat this ~PyStr~ as a integer.
- ~__bool__~: treat this ~PyStr~ as a bool value.
- ~__funlist__~: I have no clue about this method at this stage.
- ~__eq__~: compare this string with another.

~PyStr~ class has a special public method ~charAt~ which takes an index and
extracts the corresponding character.
  # TODO: I think.

* Constructor and deconstructor

#+BEGIN_SRC c++ :tangle ./export/PyStr.cpp
  #include "PyStr.h"
  #include "PyType.h"
  #include "PyFloat.h"
  #include "PyInt.h"
  #include "PyBool.h"
  #include "PyException.h"
  #include "PyStrIterator.h"
  #include "PyList.h"
  #include "PyFunList.h"
  #include <sstream>

  using namespace std;

  PyStr::PyStr(string s) : PyObject() { // TODO: ? ()
      val = s;

      dict["__add__"] = (PyObject* (PyObject::*)(vector<PyObject*>*)) (&PyStr::__add__);
      dict["__float__"] = (PyObject* (PyObject::*)(vector<PyObject*>*)) (&PyStr::__float__);
      dict["__int__"] = (PyObject* (PyObject::*)(vector<PyObject*>*)) (&PyStr::__int__);
      dict["__bool__"] = (PyObject* (PyObject::*)(vector<PyObject*>*)) (&PyStr::__bool__);
      dict["__funlist__"] = (PyObject* (PyObject::*)(vector<PyObject*>*)) (&PyStr::__funlist__);
      dict["__eq__"] = (PyObject* (PyObject::*)(vector<PyObject*>*)) (&PyStr::__eq__);
      dict["split"] = (PyObject* (PyObject::*)(vector<PyObject*>*)) (&PyStr::split);
      dict["__getitem__"] = (PyObject* (PyObject::*)(vector<PyObject*>*)) (&PyStr::__getitem__);
      dict["__len__"] = (PyObject* (PyObject::*)(vector<PyObject*>*)) (&PyStr::__len__);
      dict["__iter__"] = (PyObject* (PyObject::*)(vector<PyObject*>*)) (&PyStr::__iter__);
  }

  PyStr::PyStr(const PyStr& orig) : PyStr(orig.val) {
  }

  PyStr::~PyStr() {}
#+END_SRC

The constructor of ~PyStr~ follows the pattern that registering a series of
magic methods. A ~PyStr~ object by default has 2 groups of member functions. One
group is for type casting which can coerce a ~PyStr~ object to float, int and
bool respectively. Another group is for operations on ~PyStr~, like addition,
comparison, measuring (length), iteration and selection. A special method
(~split~) whose name is not surrounded by underscores is also registered.

* Magic functions (Part I)

This group of magic functions can take operations on string object.

** Addition

#+BEGIN_SRC c++ :tangle ./export/PyStr.cpp
  PyObject* PyStr::__add__(vector<PyObject*>* args) {
      ostringstream msg;

      if (args->size() != 1) {
	  msg << "TypeError: expected 1 arguments, got "
	      << args->size();
	  throw new PyException(PYWRONGARGCOUNTEXCEPTION, msg.str());
      }

      PyStr* arg = (PyStr*) (*args)[0];
      return new PyStr(this->val + arg->val);
  }
#+END_SRC

The magic method ~__add__~ takes exactly 1 argument, otherwise an exception
would be thrown. The result is a new ~PyStr~ object whose ~val~ field is the
outcome of concatenating by the original ~val~ and the argument's ~val~.

** Comparison

#+BEGIN_SRC c++ :tangle ./export/PyStr.cpp
  PyObject* PyStr::__eq__(vector<PyObject*>* args) {
      ostringstream msg;

      if (args->size() != 1) {
	  msg << "TypeError: expected 1 arguments, got "
	      << args->size();
	  throw new PyException(PYWRONGARGCOUNTEXCEPTION, msg.str());
      }
      PyStr* arg = (PyStr*) (*args)[0];

      if (this->toString() == arg->toString())
	  return new PyBool(true);

      return new PyBool(false);
  }
#+END_SRC

The comparison operation takes one argument then cast it to a ~PyStr~ object
whose string representation is the object upon which the actual comparison
actually takes place. If their string representation is the same, a ~PyBool~
object is constructed with the boolean value of true. Otherwise, a false
~PyBool~ object is returned.

** Selection

#+BEGIN_SRC c++ :tangle ./export/PyStr.cpp
  PyObject* PyStr::__getitem__(vector<PyObject*>* args) {
      ostringstream msg;

      if (args->size() != 1) {
	  msg << "TypeError: expected 1 arguments, got "
	      << args->size();
	  throw new PyException(PYWRONGARGCOUNTEXCEPTION, msg.str());
      }

      PyInt* intObj = (PyInt*) (*args)[0];

      int index = intObj->getVal();

      if (index >= val.size()) {
	  throw new PyException(PYILLEGALOPERATIONEXCEPTION, "Index out of range");
      }

      ostringstream s;

      s << val[index];

      return new PyStr(s.str());
  }
#+END_SRC

The ~__getitem__~ function takes exactly one argument which is expected to be a
~PyInt~ instance. This argument would be cast to a pointer to ~PyInt~ from which
the index value is retrieved. This member function will check boundary first,
then return the character at that position as a ~PyStr~ object.

** Counting

#+BEGIN_SRC c++ :tangle ./export/PyStr.cpp
  PyObject* PyStr::__len__(vector<PyObject*>* args) {
      ostringstream msg;

      if (args->size() != 0) {
	  msg << "TypeError: expected 0 arguments, got "
	      << args->size();
	  throw new PyException(PYWRONGARGCOUNTEXCEPTION, msg.str());
      }

      return new PyInt(val.size());
  }
#+END_SRC

The work of counting the number of characters in a string object ultimately
leverage the C++ string's member function ~size~.

** Iteration

#+BEGIN_SRC c++ :tangle ./export/PyStr.cpp
  PyObject* PyStr::__iter__(vector<PyObject*>* args) {
      ostringstream msg;

      if (args->size() != 0) {
	  msg << "TypeError: expected 0 arguments, got "
	      << args->size();
	  throw new PyException(PYWRONGARGCOUNTEXCEPTION, msg.str());
      }

      return new PyStrIterator(this);
  }
#+END_SRC

String object in Python is iterable. This kind of iteration is dependent on
another class ~PyStrIterator~. The ~__iter__~ member function returns a new
PyStrIterator based on ~this~ object.

* Magic functions (Part II)

This group of magic functions is related to type coercion.

** ~__str__~

#+BEGIN_SRC c++ :tangle ./export/PyStr.cpp
  PyObject* PyStr::__str__(vector<PyObject*>* args) {
      return this;
  }
#+END_SRC

This member function obviously should return the object itself.

** ~__float__~

#+BEGIN_SRC c++ :tangle ./export/PyStr.cpp
  PyObject* PyStr::__float__(vector<PyObject*>* args) {
      ostringstream msg;

      if (args->size() != 0) {
	      msg << "TypeError: expected 0 arguments, got "
		  << args-size();
	      throw new PyException(PYWRONGARGCOUNTEXCEPTION, msg.str());
      }

      double x;

      try {
	  istringstream in(this->toString());
	  in.exceptions(ios_base::failbit | ios_base::badit);
	  in >> x;
	  return new PyFloat(x);
      } catch (...) {
	  throw new PyException(PYILLGALOPRATIONEXCEPTION,
				"could not convert string to float: '" +
				this->toString() +
				"'");
      }
  }
#+END_SRC

To enable exceptions about i/o operation, we use the ~exceptions~ member
method. Before returning a new ~PyFloat~ object based on a string, the
~__float__~ method for ~PyStr~ is smart enough to check whether or not the
string value is ready for transforming.

** ~__int__~

#+BEGIN_SRC c++ :tangle ./export/PyStr.cpp
  PyObject* PyStr::__int__(vector<PyObject*>* args) {
      ostringstream msg;

      if (args->size() != 0) {
	  msg << "TypeError: expected 0 arguments, got "
	      << args->size();
	  throw new PyException(PYWRONGARGCOUNTEXCEPTION, msg.str());
      }

      int x;
      try {
	  istringstream in(this->toString());
	  in.exceptions(ios_base::failbit | ios_base::badbit);
	  in >> x;
	  return new PyInt(x);
      } catch (...) {
	  throw new PyException(PYILLEGALOPERATIONEXCEPTION,
				"invalid literal for int() with base 10: '" +
				this->toString() +
				"'");
      }
  }
#+END_SRC

This function shares the same pattern with ~__float__~. All of them use i/o
facilities to cast a string to a number.

** ~__bool__~

* Other member functions

** ~__funlist__~
** ~getType~
** ~toString~
** ~charAt~
** ~split~
