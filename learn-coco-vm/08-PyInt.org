#+TITLE: Understanding CoCo VM: ~PyInt~
#:AUTHOR: Chen Zhou

PyInt objects are limited to 32-bit or native ints in the CoCo VM.

* Header file

#+BEGIN_SRC c++ :tangle ./export/PyInt.h
  #ifndef PYINT_H
  #define PYINT_H

  #include "PyCallable.h"
  #include <vector>
  using namespace std;

  class PyInt: public PyObject {
  public:
      PyInt(int val);
      PyInt(const PyInt& orig);
      virtual ~PyInt();
      PyType* getType();
      string toString();
      int getVal();

  protected:
      int val;

      virtual PyObject* __add__(vector<PyObject*>* args);
      virtual PyObject* __sub__(vector<PyObject*>* args);
      virtual PyObject* __mul__(vector<PyObject*>* args);
      virtual PyObject* __floordiv__(vector<PyObject*>* args);
      virtual PyObject* __truediv__(vector<PyObject*>* args);
      virtual PyObject* __eq__(vector<PyObject*>* args);
      virtual PyObject* __gt__(vector<PyObject*>* args);
      virtual PyObject* __ge__(vector<PyObject*>* args);
      virtual PyObject* __le__(vector<PyObject*>* args);
      virtual PyObject* __float__(vector<PyObject*>* args);
      virtual PyObject* __int__(vector<PyObject*>* args);
      virtual PyObject* __bool__(vector<PyObject*>* args);
  };

  #endif
#+END_SRC

The ~PyInt~ class follows the standard pattern of defining an ~PyObject~ in the
CoCo VM. Due to the fact that ~__add__~, ~__sub__~, and ~__mul__~ ... magic
methods are expected to be implemented for multiple kinds of ~PyObject~, a
~virtual~ should be added to their definition's signature.
* Constructor and Destructor

#+BEGIN_SRC c++ :tangle ./export/PyInt.cpp
  PyInt::PyInt(int val): PyObject() {
      this->val = val;
      dict["__add__"] = (PyObject* (PyObject::*)(vector<PyObject*>*)) (&PyInt::__add__);
      dict["__sub__"] = (PyObject* (PyObject::*)(vector<PyObject*>*)) (&PyInt::__sub__);
      dict["__mul__"] = (PyObject* (PyObject::*)(vector<PyObject*>*)) (&PyInt::__mul__);
      dict["__floordiv__"] =
	  (PyObject* (PyObject::*)(vector<PyObject*>*)) (&PyInt::__floordiv__);
      dict["__truediv__"] =
	  (PyObject* (PyObject::*)(vector<PyObject*>*)) (&PyInt::__truediv__);
      dict["__eq__"] = (PyObject* (PyObject::*)(vector<PyObject*>*)) (&PyInt::__eq__);
      dict["__gt__"] = (PyObject* (PyObject::*)(vector<PyObject*>*)) (&PyInt::__gt__);
      dict["__lt__"] = (PyObject* (PyObject::*)(vector<PyObject*>*)) (&PyInt::__lt__);
      dict["__ge__"] = (PyObject* (PyObject::*)(vector<PyObject*>*)) (&PyInt::__ge__);
      dict["__le__"] = (PyObject* (PyObject::*)(vector<PyObject*>*)) (&PyInt::__le__);
      dict["__float__"] = (PyObject* (PyObject::*)(vector<PyObject*>*)) (&PyInt::__float__);
      dict["__int__"] = (PyObject* (PyObject::*)(vector<PyObject*>*)) (&PyInt::__int__);
      dict["__bool__"] = (PyObject* (PyObject::*)(vector<PyObject*>*)) (&PyInt::__bool__);
  }

  PyInt::PyInt(const PyInt& orig): PyInt(orig.val) {
  }

  PyInt::~PyInt() {
  }
#+END_SRC

The constructor as always register a bunch of magic methods into a
dictionary. There are three kinds of functions registered here.

- Arithmetic operations:
  - Addiction
  - Subtraction
  - Multiplication
  - Division (floor and true)
- Comparison
  - Equality
  - Greater than
  - Less than
  - Greater than or equal to
  - Less than or equal to
- Type casting
  - To float
  - To int
  - To bool

* Arithmetic operations

** Addition

#+BEGIN_SRC c++ :tangle ./export/PyInt.cpp
  PyObject* PyInt::__add__(vector<PyObject*>* args) {
      PyInt* x;
      PyFloat* y;
      ostringstream msg;

      if (args->size() != 1) {
	  msg << "TypeError: expected 1 arguments, god "
	      << args->size();
	  throw new PyException(PYWRONGARGCOUNTEXCEPTION, msg.str());
      }

      PyObject* arg = (*args)[0];

      switch (args->getType()->typeId()) {
      case PyIntType:
	  x = (PyInt*) arg;
	  return new PyInt(this->val + x->val);
      case PyFloatType:
	  y = (PyFloat*) arg;
	  return new PyFloat(this->val + y->getVal());
      default:
	  throw new PyException(PYILLEGALOPERATIONEXCEPTION,
				"Invalid types for +: int and " +
				arg->getType()->toString());
      }
  }
#+END_SRC

When a ~PyInt~ is added by another number, float or integer, the ~__add__~
function would check the type of the argument by ~arg->getType()->typeId~. A
concise switch statement delivers the argument to different branch according to
its type. The type of the result after addition is based on the argument. If
this ~PyInt~ is added to a ~PyInt~, the result is a ~PyInt~. If this ~PyInt~ is
added to a ~PyFloat~, the result is a ~PyFloat~. All of types other than these
two could cause an error when they are mistakenly added to a ~PyInt~.

** Subtraction

#+BEGIN_SRC c++ :tangle ./export/PyInt.cpp
  PyObject* PyInt::__sub__(vector<PyObject*>* args) {
      PyInt* x;
      PyFloat* y;
      ostringstream msg;

      if (args->size() != 1) {
	  msg << "TypeError: expected 1 arguments, got "
	      << args->size();
	  throw new PyException(PYWRONGARGCOUNTEXCEPTION, msg.str());
      }

      PyObject* arg = (*args)[0];

      switch (arg->getType()->typeId()) {
      case PyIntType:
	  x = (PyInt*) arg;
	  return new PyInt(this->val + x->val);
      case PyFloatType:
	  y = (PyFloat*) arg;
	  return new PyFloat(this->val + y->getVal());
      default:
	  throw new PyException(PYILLEGALOPERATIONEXCEPTION,
				"invalid types for -: int and " +
				arg->getType()->toString());
      }
  }
#+END_SRC

Subtraction's implementation is similar to that of addition. The explanation
needs not to be repeated here again.

** Multiplication

#+BEGIN_SRC c++ :tangle ./export/PyInt.cpp
  PyObject* PyInt::__mul__(vector<PyObject*>* args) {
      PyInt* x;
      PyFloat* y;

      if (args->size() != 1) {
	  msg << "TypeError: expected 1 arguments, got "
	      << args->size();
	  throw new PyException(PYWRONGARGCOUNTEXCEPTION, msg.str());
      }

      PyObject* arg = (*args)[0];

      switch (arg->getType()->typeId()) {
      case PyIntType:
	  x = (PyInt*) arg;
	  return new PyInt(this->val * x->val);
      case PyFloatType:
	  y = (PyFloat*) arg;
	  return new PyFloat(this->val * y->getVal());
      default:
	  throw new PyException(PYILLEGALOPERATIONEXCEPTION,
				"Invalid types for *: int and " +
				arg->getType()->toString());
      }
  }
#+END_SRC

Multiplication between a pair of ~PyInt~ shares the same structure that addition
and subtraction have.

** Floor division and true division

The floor division in Python is denoted as double slashes ~//~, which return
quotient of two numbers. If one of the numbers is float, the result is a float
too. If both of them are integers, the result is an integer.

For example:

#+BEGIN_SRC python
  3 // 2
  #=> 1
  3.1 // 3
  #=> 1.0
#+END_SRC

#+BEGIN_SRC c++ :tangle ./export/PyInt.cpp
  PyObject* PyInt::__floordiv__(vector<PyObject*>* args) {
      PyInt* x;
      PyFloat* y;
      ostringstream msg;

      if (args->size() != 1) {
	  msg << "TypeError: expected 1 arguments, got "
	      << args->size();
	  throw new PyException(PYWRONGARGCOUNTEXCEPTION, msg.str());
      }

      PyObject* arg = (*args)[0];

      switch (arg->getType()->typeId()) {
      case PyIntType:
	  x = (PyInt*) arg;
	  if (x->val == 0)
	      throw new PyException(PYILLEGALOPERATIONEXCEPTION,
				    "ZeroDivisionerror: integer division or modulo by zero");
	  return new PyInt(this->val / x->val);
      case PyFloatType:
	  y = (PyFloat*) arg;
	  if (y->getVal() == 0)
	      throw new PyException(PYILLEGALOPERATIONEXCEPTION,
				    "ZeroDivisionerror: integer division or modulo by zero");
	  return new PyFloat(floor(this->val / y->getVal()));
      default:
	  throw new PyException(PYILLEGALOPERATIONEXCEPTION,
				"Invalid types for *: int and " +
				arg->getType()->toString());
      }
  }
#+END_SRC

The floor division takes a floor operation on its result before final returning
a ~PyObject~. The ~floor~ function is defined in ~math.h~, which could be
included by ~cmath~ as well in c++11.

The other division ~__truediv__~ returns the result as we expected in a
calculator. However, the type of the result from this kind of division is always
float no matter what the types of dividend and divisor are.

#+BEGIN_SRC c++ :tangle ./export/PyInt.cpp
  PyObject* PyInt::__truediv__(vector<PyObject*>* args) {
      PyInt* x;
      PyFloat* y;
      ostringstream msg;

      if (args->size() != 1) {
	  msg << "TypeError: expected 1 arguments, got "
	      << args->size();
	  throw new PyException(PYWRONGARGCOUNTEXCEPTION, msg.str());
      }

      PyObject* arg = (*args)[0];

      switch (arg->getType()->typeId()) {
      case PyIntType:
	  x = (PyInt*) arg;
	  if (x->val == 0)
	      throw new PyException(PYILLEGALOPERATIONEXCEPTION,
				    "ZeroDivisionerror: integer division or modulo by zero");
	  return new PyFloat(this->val / x->val);
      case PyFloatType:
	  y = (PyFloat*) arg;
	  if (y->getVal() == 0)
	      throw new PyException(PYILLEGALOPERATIONEXCEPTION,
				    "ZeroDivisionError: integer division or modulo by zero");
	  return new PyFloat(this->val / y->getVal());
      default:
	  throw new PyException(PYILLEGALOPERATIONEXCEPTION,
				"Invalid types for *: int and " +
				arg->getType()->toString());
      }
  }
#+END_SRC

* Comparison

All comparison operations are the same.

** Equality

#+BEGIN_SRC c++ :tangle ./export/PyInt.cpp
  PyObject* PyInt::__eq__(vector<PyObject*>* args) {
      ostringstream msg;

      if (args->size() != 1) {
	  msg << "TypeError: expected 1 arguments, got "
	      << args->size();
	  throw new PyException(PYWRONGARGCOUNTEXCEPTION, msg.str());
      }

      PyInt* other = (PyInt*) (*args)[0];

      return new PyBool(val == other->val);
  }
#+END_SRC

~__eq__~ takes exactly one ~PyObject~, compares their values and returns a
~PyBool~.

** Greater than

#+BEGIN_SRC c++ :tangle ./export/PyInt.cpp
  PyObject* PyInt::__gt__(vector<PyObject*>* args) {
      ostringstream msg;

      if (args->size() != 1) {
	  msg << "TypeError: expected 1 arguments, got "
	      << args->size();
	  throw new PyException(PYWRONGARGCOUNTEXCEPTION, msg.str());
      }

      PyInt* other = (PyInt*) (*args)[0];

      return new PyBool(val > other->val);
  }
#+END_SRC

** Less than

#+BEGIN_SRC c++ :tangle ./export/PyInt.cpp
  PyObject* PyInt::__lt__(vector<PyObject*>* args) {
      ostringstream msg;

      if (args->size() != 1) {
	  msg << "TypeError: expected 1 arguments, got "
	      << args->size();
	  throw new PyException(PYWRONGARGCOUNTEXCEPTION, msg.str());
      }

      PyInt* other = (PyInt*) (*args)[0];

      return new PyBool(val < other->val);
  }
#+END_SRC

** Greater than or equal to

#+BEGIN_SRC c++ :tangle ./export/PyInt.cpp
  PyObject* PyInt::__le__(vector<PyObject*>* args) {
      ostringstream msg;

      if (args->size() != 1) {
	  msg << "TypeError: expected 1 arguments, got "
	      << args->size();
	  throw new PyException(PYWRONGARGCOUNTEXCEPTION, msg.str());
      }

      PyInt* other = (PyInt*) (*args)[0];

      return new PyBool(val <= other->val);
  }
#+END_SRC

** Less than or equal to

#+BEGIN_SRC c++ :tangle ./export/PyInt.cpp
  PyObject* PyInt::__le__(vector<PyObject*>* args) {
      ostringstream msg;

      if (args->size() != 1) {
	  msg << "TypeError: expected 1 arguments, got "
	      << args->size();
	  throw new PyException(PYWRONGARGCOUNTEXCEPTION, msg.str());
      }

      PyInt* other = (PyInt*) (*args)[0];

      return new PyBool(val <= other->val);
  }
#+END_SRC

* Basic methods
   # toString, getVal,
