#+TITLE: Understanding CoCo VM: ~PyInt~
#:AUTHOR: Chen Zhou

PyInt objects are limited to 32-bit or native ints in the CoCo VM.

* Header file

#+BEGIN_SRC c++ :tangle ./export/PyInt.h
  #ifndef PYINT_H
  #define PYINT_H

  #include "PyCallable.h"
  #include <vector>
  using namespace std;

  class PyInt: public PyObject {
  public:
      PyInt(int val);
      PyInt(const PyInt& orig);
      virtual ~PyInt();
      PyType* getType();
      string toString();
      int getVal();

  protected:
      int val;

      virtual PyObject* __add__(vector<PyObject*>* args);
      virtual PyObject* __sub__(vector<PyObject*>* args);
      virtual PyObject* __mul__(vector<PyObject*>* args);
      virtual PyObject* __floordiv__(vector<PyObject*>* args);
      virtual PyObject* __truediv__(vector<PyObject*>* args);
      virtual PyObject* __eq__(vector<PyObject*>* args);
      virtual PyObject* __gt__(vector<PyObject*>* args);
      virtual PyObject* __ge__(vector<PyObject*>* args);
      virtual PyObject* __le__(vector<PyObject*>* args);
      virtual PyObject* __float__(vector<PyObject*>* args);
      virtual PyObject* __int__(vector<PyObject*>* args);
      virtual PyObject* __bool__(vector<PyObject*>* args);
  };

  #endif
#+END_SRC

The ~PyInt~ class follows the standard pattern of defining an ~PyObject~ in the
CoCo VM. Due to the fact that ~__add__~, ~__sub__~, and ~__mul__~ ... magic
methods are expected to be implemented for multiple kinds of ~PyObject~, a
~virtual~ should be added to their definition's signature.
