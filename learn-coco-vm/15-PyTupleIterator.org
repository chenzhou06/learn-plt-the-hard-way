#+TITLE: Understanding CoCo VM: ~PyTupleIterator~
#+Author: Chen Zhou

* Header file

#+BEGIN_SRC c++ :tangle ./export/PyTupleIterator.h
  #ifndef PYTUPLEITERATOR_H
  #define PYTUPLEITERATOR_H

  #include "PyObject.h"
  #include "PyType.h"
  #include "PyTuple.h"
  #include <string>
  using namespace std;

  class PyTupleIterator: public PyObject {
  public:
      PyTupleIterator(PyTuple* lst);
      virtual ~PyTupleIterator();
      PyType* getType();
      string toString();

  protected:
      PyTuple* lst;
      int index;

      virtual PyObject* __iter__(vector<PyObject*>* args);
      virtual PyObject* __next__(vector<PyObject*>* args);
  };

  #endif
#+END_SRC

* Constructor and others

#+BEGIN_SRC c++ :tangle ./export/PyTupleIterator.cpp
  #include "PyTupleIterator.h"
  #include "PyException.h"
  #include <sstream>
  #include <string>
  using namespace std;

  PyTupleIterator::PyTupleIterator(PyTuple* lst): PyObject() {
      this->index = 0;
      this->lst = lst;

      dict["__iter__"] =
	  (PyObject* (PyObject::*)(vector<PyObject*>*)) (&PyTupleIterator::__iter__);
      dict["__next__"] =
	  (PyObject* (PyObject::*)(vector<PyObject*>*)) (&PyTupleIterator::__next__);
  }

  PyTupleIterator::~PyTupleIterator() {
  }
#+END_SRC

* Type and string

#+BEGIN_SRC c++ :tangle ./export/PyTupleIterator.cpp
  PyType* PyTupleIterator::getType() {
      return PyTypes[PyTupleIterator];
  }

  string PyTupleIterator::toString() {
      ostringstream s;
      s << "<tuple_iterator object at " << this << << ">";
      return s.str();
  }
#+END_SRC

* Next and iter

#+BEGIN_SRC c++ :tangle ./export/PyTupleIterator.cpp
  PyObject* PyTupleIterator::__iter__(vector<PyObject*>* args) {
      ostringstream msg;
      if (args->size() != 0) {
	  msg << "TypeError: expected 0 arguments, got "
	      << args->size();
	  throw new PyException{PYWRONGARGCOUNTEXCEPTION, msg.str());
      }
      return this;
  }

  PyObject* PyTupleIterator::__next__(vector<PyObject*>* args) {
      ostringstream msg;
      if (args->size() != 0) {
	  msg << "TypeError: expected 0 arguments, got "
	      << args->size();
	  throw new PyException(PYWRONGARGCOUNTEXCEPTION, msg.str());
      }
      return lst->getVal(index++);
  }
#+END_SRC
