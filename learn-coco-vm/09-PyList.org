#+TITLE: Understanding CoCo VM: ~PyList~
#+AUTHOR: Chen Zhou

* Header file

Under the hood, ~PyList~ is implemented as a vector of ~PyObject*~.

#+BEGIN_SRC c++ :tangle ./export/PyList.h
  #ifndef PYLIST_H
  #define PYLIST_H

  #include "PyObject.h"
  #include "PyType.h"
  #include <vector>
  using namespace std;

  class PyList: public PyObject {
  public:
      PyList(vector<PyObject*>* lst);
      virtual ~PyList();
      PyType* getType();
      string toString();
      PyObject* getVal(int index);
      void setVal(int index, PyObject* val);

  protected:
      vector<PyObject*>* data;

      virtual PyObject* __getitem__(vector<PyObject*>* args);
      virtual PyObject* __setitem__(vector<PyObject*>* args);
      virtual PyObject* __len__(vector<PyObject*>* args);
      virtual PyObject* __iter__(vector<PyObject*>* args);
      virtual PyObject* append(vector<PyObject*>* args);
  };

  #endif
#+END_SRC

* Constructor, destructor and else

#+BEGIN_SRC c++ :tangle ./export/PyList.cpp
  #include "PyList.h"
  #include "PyListIterator.h"
  #include "PyException.h"
  #include "PyNone.h"
  #include "PyInt.h"
  #include <sstream>
  using namespace std;

  PyList::PyList(vector<PyObject*>* lst): PyObject() {
      data = *lst;

      dict["__getitem__"] =
	  (PyObject* (PyObject::*)(vector<PyObject*>*)) (&PyList::__getitem__);
      dict["__setitem__"] =
	  (PyObject* (PyObject::*)(vector<PyObject*>*)) (&PyList::__setitem__);
      dict["__len__"] = (PyObject* (PyObject::*)(vector<PyObject*>*)) (&PyList::__len__);
      dict["__iter__"] = (PyObject* (PyObject::*)(vector<PyObject*>*)) (&PyList::__iter__);
      dict["append"] = (PyObject* (PyObject::*)(vector<PyObject*>*)) (&PyList::append);
  }

  PyList::~PyList() {
  }
#+END_SRC

** Get item and set item

There are two groups of methods to get and set items. The first group takes an
integer as index. Another takes a ~PyInt~ as index.

#+BEGIN_SRC c++ :tangle ./export/PyList.cpp
  void PyList::setVal(int index, PyObject* obj) {
      data[index] = obj;
  }

  PyObject* PyList::getVal(int index) {
      if (index >= data.size()) {
	  throw new PyException(PYSTOPITERATIONEXCEPTION, "Stop Iteration");
      }

      return data[index];
  }


  PyObject* PyList::__setitem__(vector<PyObject*>* args) {
      ostringstream msg;

      if (args->size() != 2) {
	  msg << "TypeError: expected 2 arguments, got "
	      << args->size();
	  throw new PyException(PYWRONGARGCOUNTEXCEPTION, msg.str());
      }

      PyInt* intObj = (PyInt*) (*args)[0];

      int index = intObj->getVal();

      if (index >= data.size()) {
	  throw new PyException(PYILLEGALOPERATIONEXCEPTION, "Index out of range.");
      }

      data[index] = (*args)[1];

      return new PyNone();
  }

  PyObject* PyList::__getitem__(vector<PyObject*>* args) {
      ostringstream msg;

      if (args->size() != 1) {
	  msg << "TypeError: expected 1 arguments, got "
	      << args->size();
	  throw new PyException(PYWRONGARGCOUNTEXCEPTION, msg.str());
      }

      PyInt* intObj = (PyInt*) (*args)[0];

      int index = intObj->getVal();

      if (index >= data.size()) {
	  throw new PyException(PYILLEGALOPERATIONEXCEPTION, "Index out of range.");
      }

      return data[index];
  }
#+END_SRC

~__setitem__~ does return a ~PyNone~ object. On the contrary, ~setVal~ returns
nothing. Every magic method should return a ~PyObject~, if a procedure do not
have a return value, it should return a ~PyNone~.

** Get type and to string
   # TODO: getType and toString

#+BEGIN_SRC c++ :tangle ./export/PyList.cpp
  PyType* PyList::getType() {
      return PyTypes[PyListType];
  }

  string PyList::toString() {
      ostringstream s;

      s << "[";
      for (int i=0; i<data.size(); i++) {
	  s << data[i]->toString();

	  if (i < data.size() - 1)
	      s << ", ";
      }
      s << "]";
      return s.str();
  }
#+END_SRC

** Length and append

#+BEGIN_SRC c++ :tangle ./export/PyList.cpp
  PyObject* PyList::__len__(vector<PyObject*>* args) {
      ostringstream msg;

      if (args->size() != 0) {
	  msg << "TypeError: expected 0 arguments, got "
	      << args->size();
	  throw new PyException(PYWRONGARGCOUNTEXCEPTION, msg.str());
      }
      return new PyInt(data.size());
  }

  PyObject* PyList::append(vector<PyObject*>* args) {
      PyObject* obj = (*args)[0];
      data.push_back(obj);
      return new PyNone();
  }
#+END_SRC

The ~append~ method also return a ~PyNone~ object as a result.

** Iteration

#+BEGIN_SRC c++ :tangle ./export/PyList.cpp
  PyObject* PyList::__iter__(vector<PyObject*>* args) {
      ostringstream msg;

      if (args->size() != 0) {
	  msg << "TypeError: expected 0 arguments, got "
	      << args->size();
	  throw new PyExceptionï¼ˆPYWRONGARGCOUNTEXCEPTION, msg.str());
      }

      return new PyListIteration(this);
  }
#+END_SRC

The ~__iter__~ method returns an iteration object. This kind of class has more
explanation in the later notes.
