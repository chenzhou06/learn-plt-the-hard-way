#+TITLE: Understanding CoCo VM: ~PyScanner~
#+AUTHOR: Chen Zhou

* Header file

#+BEGIN_SRC c++ :tangle ./export/PyScanner.h
  #ifndef PYSCANNER_H_
  #define PYSCANNER_H_

  #include <fstream>
  #include "PyToken.h"

  using namespace std;

  class PyScanner {
  public:
      PyScanner(istream* in);
      virtual ~PyScanner();
      PyToken* getToken();
      void putBackToken();

  private:
      istream* in;
      PyToken* lastToken;
      bool needToken;
      int colCount;
      int lineCount;
      bool error;
  };

  #endif
#+END_SRC

The scanner is based on ~PyToken~ which has not been viewed yet. A scanner has
its input stream pipe, and keeps records of the lastToken and maintains its
state indicating whether or not it needs another token. A scanner also traces the
column number and the line number for better debugging experience.

* Help functions

#+BEGIN_SRC c++ :tangle ./export/PyScanner.cpp
  #include "PyScanner.h"
  #include <iostream>
  using namespace std;

  const char SINGLE_QUOTE = 39;
  const int numberOfKeywords = 2;

  const string keywd[numberOfKeywords] = {
      string("BEGIN"), string("END")
  };

  int isLetter(char c) {          // return a integer
      return ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == ' ' || c == '@');
  }

  int isDigit(char c) {           // return a integer
      return (c >= '0' && c <= '9');
  }

  int isWhiteSpace(char c) {
      return (c == ' ' || c == '\t' || c == '\n');
  }
#+END_SRC

Scanner defined three functions to predicate a character is whether a letter, a
digit or a white space. These functions return integer instead of bool.

* Constructor

#+BEGIN_SRC c++ :tangle ./export/PySanner.cpp
  PyScanner::PyScanner(istream* in) {
      this->in = in;
      this->needToken = true;
      this->colCount = -1;
      this->lineCount = 1;
      this->error = false;
  }

  PyScanner::~PyScanner() {
      try {
	  delete in;
      } catch (...) {}
  }
#+END_SRC

A ~PyScanner~ is initiated with ~needToken~ as true, ~colCount~ as -1,
~lineCount~ as 1.

* Get token

The scanner basically just do one thing---generating tokens from source code.

#+BEGIN_SRC c++ :tangle ./export/PyScanner.cpp
  PyToken* PyScanner::getToken() {
      if (!needToken) {
	  needToken = true;
	  return lastToken;
      }

      PyToken* t;
      int state = 0;
      bool foundOne = false;
      char c;
      string lex;
      int type;
      int k;
      int column, line;

      c = in-get();

      while (!foundOne) {
	  colCount++;
	  switch (state) {
	  case 0:
	      lex = "";
	      column = colCount;
	      line = lineCount;
	      if (isLetter(c)) state = 1;
	      else if (isDigit(c)) state = 2;
	      else if (c == '-') state = 11;
	      else if (c == ':') state = 3;
	      else if (c == ',') state = 4;
	      else if (c == SINGLE_QUOTE) state = 6;
	      else if (c == '"') state = 7;
	      else if (c == '/') state = 8;
	      else if (c == '(') state = 9;
	      else if (c == ')') state = 10;
	      else if (c == ';') state = 12;
	      else if (c == -1) {
		  foundOne = true;
		  type = PYEOFTOKEN;
	      } else if (c == '\n') {
		  colCount = -1;
		  lineCount++;
	      } else if (isWhiteSpace(c)) {
	      } else if (in-eof()) {
		  foundOne = true;
		  type = PYEOFTOKEN;
	      } else {
		  if (!error) {
		      cerr << "Unrecognized Character '"
			   << "' found at line "
			   << line
			   << " and column "
			   << column
			   << endl;
		      error = true;
		  }
		  type = PYBADTOKEN;
		  lex = c;
		  foundOne = true;
	      }
	      break;
	  case 1:
	      if (isLetter(c) || isDigit(c)) state = 1;
	      else {
		  for (k=0; k<numberOfKeywords; k++)
		      if (lex == keywd[k]) {
			  foundOne = true;
			  type = PYKEYWORDTOKEN;
		      }
		  if (!foundOne) {
		      type = PYIDENTIFIERTOKEN;
		      foundOne = true;
		  }
	      }
	      break;
	  case 2:
	      if (isDigit(c)) state = 2;
	      else if (c == '.') state = 5;
	      else {
		  type = PYINTEGERTOKEN;
		  foundOne = true;
	      }
	      break;
	  case 3:
	      type = PYCOMMATOKEN;
	      foundOne = true;
	      break;
	  case 4:
	      type = PYCOMMATOKEN;
	      foundOne = true;
	      break;
	  case 5:
	      if (isDigit(c)) state = 5;
	      else {
		  type = PYFLOATTOKEN;
		  foundOne = true;
	      }
	      break;
	  case 6:
	      if (c == SINGLE_QUOTE) {
		  type = PYSTRINGTOKEN;
		  lex = lex + c;
		  lex = lex.substr(1, lex.size() - 2);
		  c = in->get();
		  foundOne = true;

		  if (in->eof()) {
		      type = PYBADTOKEN;
		  }
	      } else {
		  if (in->eof()) {
		      type = PYBADTOKEN;
		      foundOne = true;
		  }
	      }
	      break;
	  case 7:
	      if (c == '"') {
		  type = PYSTRINGTOKEN;
		  lex = lex + c;
		  lex = lex.substr(1, lex.size() - 2);
		  c = in->get();
		  foundOne = true;
	      } else {
		  if (in->eof()) {
		      type = PYBADTOKEN;
		      foundOne = true;
		  }
	      }
	      break;
	  case 8:
	      foundOne = true;
	      type = PYSLASHTOKEN;
	      break;
	  case 9:
	      foundOne = true;
	      type = PYLEFTPARENTOKEN;
	      break;
	  case 10:
	      foundOne = true;
	      type = PYRIGHTPARENTOKEN;
	      break;
	  case 11:
	      if (isDigit(c))
		  state = 2;
	      else {
		  type = PYBADTOKEN;
		  foundOne = true;
	      }
	      break;
	  case 12:
	      if (c == '\n' || c == -1) {
		  colCount = -1;
		  lineCount++;
		  state = 0;
		  lex = "";
	      }
	      break;
	  }

	  if (!foundOne) {
	      lex = lex + c;
	      c = in->get();
	  }
      }
      in->putback(c);
      colCount--;
      t = new PyToken(type, lex, line, column);

  #ifdef debug
      cerr << "just found " << lex << " with type " << type << endl;
  #enfif

      lastToken = t;
      return t;
  }

  void PyScanner::putBackToken() {
      needToken = false;
  }
#+END_SRC
