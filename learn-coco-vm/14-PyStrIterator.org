#+TITLE: Understanding CoCo VM: ~PyStrIterator~
#+AUTHOR: Chen Zhou

* Header file

#+BEGIN_SRC c++ :tangle ./export/PyStrIterator.h
  #ifndef PYSTRITERATOR_H
  #define PYSTRITERATOR_H

  #include "PyObject.h"
  #include "PyType.h"
  #include "PyStr.h"

  class PyStrIterator: public PyObject {
  public:
      PyStrIterator(PyStr* str);
      virtual ~PyStrIterator();

      PyType* getType();
      string toString();

  private:
      PyStr* str;
      int index;

      virtual PyObject* __iter__(vector<PyObject*>* args);
      virtual PyObject* __next__(vector<PyObject*>* args);
  };

  #endif
#+END_SRC

This is the first time the keyword ~private~ appeared in a class.

* Constructor and others

#+BEGIN_SRC c++ :tangle ./export/PyStrIterator.cpp
  #include "PyStrIterator.h"
  #include "PyException.h"
  #include "PyStr.h"
  #include <sstream>
  using namespace std;

  PyStrIterator::PyStrIterator(PyStr* str): PyObject() {
      this->str = str;
      this->index = 0;

      dict["__iter__"] =
	  (PyObject* (PyObject::*)(vector<PyObject*>*)) (&PyStrIterator::__iter__);
      dict["__next__"] =
	  (PyObject* (PyObject::*)(vector<PyObject*>*)) (&PyStrIterator::__next__);
  }

  PyStrIterator::~PyStrIterator() {
  }
#+END_SRC

* Type and string

#+BEGIN_SRC c++ :tangle ./export/PyStrIterator.cpp
  PyType* PyStrIterator::getType() {
      return PyTypes[PyStrIteratorType];
  }

  string PyStrIterator::toString() {
      ostringstream s;
      s << "<str_iterator object at " << this << ">";
      return s.str();
  }
#+END_SRC

* Iter and next

#+BEGIN_SRC c++ :tangle ./export/PyStrIterator.cpp
  PyObject* PyStrIterator::__iter__(vector<PyObject*>* args) {
      ostringstream msg;

      if (args->size() != 0) {
	  msg << "TypeError: expected 0 arguments, got "
	      << args->size();
	  throw new PyException(PYWRONGARGCOUNTEXCEPTION, msg.str());
      }
      return this;
  }

  PyObject* PyStrIterator::__next__(vector<PyObject*>* args) {
      ostringstream msg;
      if (args->size() != 0) {
	  msg << "TypeError: expected 0 arguments, got "
	      << args->size();
	  throw new PyException(PYWRONGARGCOUNTEXCEPTION, msg.str());
      }
      return str->charAt(index++);
  }
#+END_SRC

The iterator for ~PyStr~ is different from that for ~pyList~ in the aspect that
the return value is not an abstract pointer to ~PyObject~ but a ~PyStr~
(pointer) which contains only one character.
