#+TITLE: Understanding CoCo VM: ~PyFunListIterator~
#+AUTHOR: Chen Zhou

* Header file

#+BEGIN_SRC c++ :tangle ./export/PyFunListIterator.h
  #ifndef PYFUNLISTITERATOR_H
  #define PYFUNLISTITERATOR_H

  #include "PyObject.h"
  #include "PyType.h"
  #include "PyFunList.h"
  #include <string>

  using namespace std;

  class PyFunListIterator: public PyObject {
  public:
      PyFunListIterator(PyFunList* lst);
      virtual ~PyFunListIterator();
      PyType* getType();
      string toString();

  protected:
      PyFunLisElm* elm;
      virtual PyObject* __iter__(vector<PyObject*>* args);
      virtual PyObject* __next__(vector<PyObject*>* args);
  };

  #endif
#+END_SRC

* Constructor

Iterator has two magic methods, ~__iter__~ and ~__next__~.

#+BEGIN_SRC c++ :tangle ./export/PyFunListIterator.cpp
  #include "PyFunListIterator.h"
  #include "PyFunList.h"
  #include "PyException.h"
  #include <sstream>
  #include <string>
  using namespace std;

  PyFunListIterator::PyFunListIterator(PyFunList* lst): PyObject() {
      this->elm = lst->getElm();

      dict["__iter__"] =
	  (PyObject* (PyObject::*)(vector<PyObject*>*)) (&PyFunListIterator::__iter__);
      dict["__next__"] =
	  (PyObject* (PyObject::*)(vector<PyObject*>*)) (&PyFunListIterator::__next__);
  }

  PyFunListIterator::~PyFunListIterator() {
  }
#+END_SRC

* Type and string

#+BEGIN_SRC c++ :tangle ./export/PyFunListIterator.cpp
  PyType* PyFunListIterator::getType() {
      return PyTypes[PyFunListIteratorType];
  }

  string PyFunListIterator::toString() {
      ostringstream s;
      s << "<funlist_iterator object at " << this << << ">";
      return s.str();
  }
#+END_SRC

* Iter and next

Every time the next method is called, the head is returned and the ~elm~ field
is changed to the tail.

#+BEGIN_SRC c++ :tangle ./export/PyFunListIterator.cpp
  PyObject* PyFunListIterator::__iter__(vector<PyObject*>* args) {
      ostringstream msg;
      if (args->size() != 0) {
	  msg << "TypeError: expected 0 arguments, got " << args->size();
	  throw new PyException(PYWRONGARGCOUNTEXCEPTION, msg.str());
      }
      return this;
  }

  PyObject* PyFunListIterator::__next__(vector<PyObject*>* args) {
      ostringstream msg;
      if (args->size() != 0) {
	  msg << "TypeError: expected 0 arguments, got "
	      << args->size();
	  throw new PyException(PYWRONGARGCOUNTEXCEPTION, msg.str());
      }
      if (elm == NULL) {
	  throw new PyException(PYWRONGARGCOUNTEXCEPTION, "Stopping Iteration");
      }
      PyObject* item = elm->getHead();
      elm = elm->getTail();
      return item;
  }
#+END_SRC
