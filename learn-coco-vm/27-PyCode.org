#+TITLE: Understanding CoCo VM: ~PyCode~
#+AUTHOR: Chen Zhou

* Header file

Each ~PyCode~ object has a name, a number of arguments, corresponding byte code,
constants, local variables, free variables, cell variables, globals.

#+BEGIN_SRC c++ :tangle ./export/PyCode.h
  #ifndef PYCODE_H
  #define PYCODE_H

  #include "PyByteCode.h"
  #include "PyObject.h"
  #include <string>
  #include <vector>
  using namespace std;

  class PyCode: public PyObject {
  public:
      PyCode(string name, vector<PyCode*>* nestedFunctions,
	     vector<PyObject*>* consts, vector<string>* locals,
	     vector<PyObject*>* freevars, vector<string>* cellVars,
	     vector<PyObject*>* globals, vector<PyByteCode*>* code,
	     int argcount);
      virtual ~PyCode();

      string getName() const;
      vector<string>& getLocals() const;
      vector<string>& getFreeVars() const;
      vector<string>& getCellVars() const;
      vector<string>& getGlobals() const;
      vector<PyObject*>&  getConsts() const;
      vector<PyByteCode*>& getInstructions() const;
      vector<PyCode*>& getNestedFunctions() const;
      int getArgCount() const;
      int numLocals() const;
      string toString();
      string prettyString(string indent, bool linenumbers) const;
      PyType* getType();

      PyObject* __str__(vector<PyObject*>* args);
      PyObject* __type__(vector<PyObject*>* args);

  private:
      string name;
      vector<PyCode*>* nestedFunctions;
      vector<string>* locals;
      vector<string>* freevars;
      vector<string>* cellvars;
      vector<string>* globals;
      vector<PyObject*>* consts;
      vector<PyByteCode*>* instructions;
      int argcount;
  };

  #endif
#+END_SRC

* Constructor

#+BEGIN_SRC c++ :tangle ./export/PyCode.cpp
  #include "PyCode.h"
  #include "PyType.h"
  #include "PyStr.h"
  #include <sstream>
  using namespace std;

  PyCode::PyCode(string name,
		 vector<PyCode*>* nestedFuns,
		 vector<PyObject*>* consts,
		 vector<string>* locals,
		 vector<string>* freevars,
		 vector<string>* cellvars,
		 vector<string>* globals,
		 vector<PyByteCode*>* code,
		 int argcount): PyObject() {
      this->name = name;
      this->locals = locals;
      this->freevars = freevars;
      this->cellvars = cellvars;
      this->globals = globals;
      this->consts = consts;
      this->instructions = code;
      this->argcount = argcount;
      this->nestedFunctions = nestedFuns;
  }

  PyCode::~PyCode() {
      try {
	  delete nestedFunctions;
      } catch (...) {}
      try {
	  delete instructions;
      } catch (...) {}
      try {
	  delete consts;
      } catch (...) {}
      try {
	  delete globals;
      } catch (...) {}
      try {
	  delete cellvars;
      } catch (...) {}
      try {
	  delete freevars;
      } catch (...) {}
      try {
	  delete locals;
      } catch (...) {}
  }
#+END_SRC

* Accessor

#+BEGIN_SRC c++ :tangle ./export/PyCode.cpp
  string PyCode::getName() const {
      return this->name;
  }

  vector<PyCode*>& PyCode::getNestedFunctions() const {
      return *nestedFunctions;
  }

  vector<PyCode*>& PyCode::getLocals() const {
      return *(this->locals);
  }

  vector<string>& PyCode::getFreeVars() const {
      return *(this->freevars);
  }

  vector<string>& PyCode::getGlobals() const {
      return *(this->globals);
  }

  vector<PyObject*>& PyCode::getConsts() const {
      return *(this->consts);
  }

  vector<PyByteCode*>& PyCode::getInstructions() const {
      return *(this->instructions);
  }

#+END_SRC

|------------------+--------------------+----------------------|
| Field            | Method             | Type                 |
|------------------+--------------------+----------------------|
| name             | getName            | string               |
| local variables  | getLocals          | vector<string>&      |
| free variables   | getFreeVars        | vector<string>&      |
| cell variables   | getCellVars        | vector<string>&      |
| global variables | getGlobals         | vector<string>&      |
| constant objects | getConsts          | vector<PyObject*>&   |
| Instructions     | getInstructions    | vector<PyByteCode*>& |
| nested functions | getNestedFunctions | vector<PyCode*>&     |
|------------------+--------------------+----------------------|

* Helper Functions

#+BEGIN_SRC c++ :tangle ./export/PyCode.cpp
  int PyCode::getArgCount() const {
      return this->argcount;
  }

  int PyCode::numLocals() const {
      return this->locals->size();
  }

  PyType* PyCode::getType() {
      return PyTypes[PyCodeType];
  }
#+END_SRC


* Pretty Print
#+BEGIN_SRC c++ :tangle ./export/PyCode.cpp
  string vectorValsToString(string name, vector<PyObject*>* lst) {
      string result = "";
      if (lst->size() > 0) {
	  result += name;
	  int i;
	  for (i = 0; i < lst->size(); i++) {
	      PyObject* obj = (*lst)[i];
	      if (obj->getType()->typeId() == PyStrType)
		  result += "'" + obj->toString() + "'";
	      else
		  result += (*lst)[i]->toString();

	      if (i < lst->size() - 1)
		  result += ", ";
	  }
	  result += "\n";
      }
      return result;
  }

  string vectorToString(string name, vector<string>* lst) {
      string result = "";

      if (lst->size() > 0) {
	  result += name;
	  int i;
	  for (i = 0; i < lst->size(); i++) {
	      result += (*lst)[i];
	      if (i < lst->size() - 1)
		  result += ", ";
	  }
	  result += "\n";
      }
      return result;
  }

  string PyCode::prettyString(string indent, bool linenumbers) const {
      stringstream ss;

      ss << indent << "Function: " << name << "/" << argcount << "\n";

      if (!linenumbers)
	  for (int i = 0; i < nestedFunctions->size(); i++) {
	      ss << (*nestedFunctions)[i]->prettyString(indent + "    ",
							linenumbers);
	  }

      ss << vectorValsToString(indent + "Constants: ", consts);
      ss << vectorToString(indent + "Locals: ", locals);
      ss << vectorToString(indent + "FreeVars: ", freevars);
      ss << vectorToString(indent + "CellVars: ", cellvars);
      ss << vectorToString(indent + "Globals: ", globals);
      ss << indent << "BEGIN\n";

      int i;
      for (i = 0; i < instructions->size(); i++) {
	  if (linenumbers) {
	      ss << i << ": ";
	      if (i < 10)
		  ss << " ";
	      if (i < 100)
		  ss << " ";
	  }
	  ss << indent << (*instructions)[i]->toString() << "\n";
      }

      ss << indent + "END\n";

      return ss.str();
  }

  string PyCode::toString() {
      return "code(" + this->name + ")";
  }
#+END_SRC

* Magic methods

#+BEGIN_SRC c++ :tangle ./export/PyCode.cpp
  PyObject* PyCode::__type__(vector<PyObject*>* args) {
      return PyTypes[PyCodeType];
  }

  PyObject* PyCode::__str__(vector<PyObject*>* args) {
      return new PyStr(toString());
  }
#+END_SRC
