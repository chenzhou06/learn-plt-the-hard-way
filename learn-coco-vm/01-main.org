#+TITLE: Understanding CoCo VM: ~main.cpp~
#+AUTHOR: Chen Zhou

This is a project for learning programming language theory. Since I do
not have much experience in computer science, I decide to go through a
real but simple project line by line, trying to interpret every code I
encountered during the process. The project I chose is the [[http://knuth.luther.edu/~leekent/CoCo/][CoCo
virtual machine]] for Python, which is implemented in C++ and has a book
dedicated to teaching basic programming theory as a company, thus the
learning procedure would be much facilitated.

* The ~main.cpp~ file.

A lots of header files from which we can glimpse the whole picture of
this virtual machine.

#+BEGIN_SRC c++ :tangle ./export/main.cpp
  #include "PyStack.h"
  #include "PyScanner.h"
  #include "PyParser.h"
  #include "PyCode.h"
  #include "PyObject.h"           // Oh, maybe I shall start here.
  #include "PyInt.h"
  #include "PyType.h"
  #include "PyFunction.h"
  #include "PyBuiltInPrint.h"
  #include "PyBuiltInFPrint.h"
  #include "PyBuiltInTPrint.h"
  #include "PyException.h"        // Include once.
  #include "PyExceptionType.h"
  #include "PyBuiltInInput.h"
  #include "PyStr.h"
  #include "PyFloat.h"
  #include "PyBool.h"
  #include "PyRange.h"
  #include "PyRangeType.h"
  #include "PyRangeIterator.h"
  #include "PyBuiltInIter.h"
  #include "PyBuiltInLen.h"
  #include "PyBuiltInConcat.h"
  #include "PyFrame.h"
  #include "PyException.h"        // Yes, include twice.
  #include <iostream>
  #include <fstream>
  #include <unordered_map>
  #include <csignal>
  #include <stdlib.h>
#+END_SRC

These header files can be organized in three major categories as Table
[[tab:header-files]].

#+CAPTION: Organization of header files
#+NAME: tab:header-files
| Python Objects    | Runtime Management | Parser      | Builtin Functions |
|-------------------+--------------------+-------------+-------------------|
| PyObject.h        | PyStack.h          | PyScanner.h | PyBuiltInPrint    |
| PyBool.h          | PyFrame.h          | PyCode.h    | PyBuiltInFPrint.h |
| PyInt.h           |                    |             | PyBuiltInTPrint.h |
| PyType.h          |                    |             | PyBUiltInInput.h  |
| PyFunction.h      |                    |             | PyBuiltInIter.h   |
| PyException.h     |                    |             | PyBuiltInLen.h    |
| PyExceptionType.h |                    |             | PyBuiltInConcat.h |
| PyStr.h           |                    |             |                   |
| PyRange.h         |                    |             |                   |
| PyRangeType.h     |                    |             |                   |
| PyRangeIterator.h |                    |             |                   |

* Stack

Following the header files is the implementation of stack.

#+BEGIN_SRC c++ :tangle ./export/main.cpp
  using namespace std;

  vector<PyFrame*> callStack;

  void pushFrame(PyFrame* frame) {
    callStack.push_back(frame);
    if (callStack.size() == 1000) {
      throw new PyException(PYILLEGALOPERATIONEXCEPTION, "Call Stack Overflow.");
    }
  }

  void popFrame() {
    callStack.pop_back();
  }
#+END_SRC

The ~callStack~ is actually a vector of ~PyFrame~ pointers. The
function ~pushFrame~ and ~popFrame~ utilize vector's method
~push_back~ and ~pop_back~ respectively. When push a new frame to the
stack, The function ~pushFrame~ also check whether the length of the
stack is over 1000, otherwise an ~PyException~ saying "Call Stack
Overflow" would be thrown.

* Signal Handler

The CoCo VM use signal to catch six uncaught exceptions.

#+caption: Signal and Exceptions
#+NAME: tab:sig-exp
| Signal  | Exception                              |
|---------+----------------------------------------|
| SIGABRT | Program Execution Aborted              |
| SIGFPE  | Arithmetic or Overflow Error           |
| SIGILL  | Illegal Instruction in Virtual Machine |
| SIGINT  | Execution Interrupted                  |
| SIGSEGV | Illegal Memory Access                  |
| SIGTERM | Termination Requested                  |

#+BEGIN_SRC c++ :tangle ./export/main.cpp
  void sigHandler(int signum) {
    cerr <<"\n\n";
    cerr << "**********************************************************" << endl;
    cerr << "      An Uncaught Exception Occurred" << endl;
    cerr << "**********************************************************" << endl;
    cerr << "Signal: ";
    switch (signum) {
    case SIGABRT:
      cerr << "Program Execution Aborted" << endl;
      break;
    case SIGFPE:
      cerr << "Arithmetic or Overflow Error" << endl;
      break;
    case SIGILL:
      cerr << "Illegal Instruction in Virtual Machine" << endl;
      break;
    case SIGINT:
      cerr << "Execution Interrupted" << endl;
      break;
    case SIGSEGV:
      cerr << "Illegal Memory Access" << endl;
      break;
    case SIGTERM:
      cerr << "Termination Requested" << endl;
      break;
    }

    cerr << "----------------------------------------------------------" << endl;
    cerr << "                  The Exception's Traceback" << endl;

    // Go through the stack to print error information.
    for (int k=callStack.size()-1; k>=0; k--) {
      cerr << "==========> At PC="
	   << (callStack[k]->getPC()-1)
	   << " in this function."
	   << endl;
      cerr << callStack[k]->getCode().prettyString("",true);
      exit(0);
    }
  }
#+END_SRC

To produce error information when these exception happens, the
~sigHandler~ will go through the ~callStack~, print the relevant PC
and code in some readable format. The signals are all included by
~csignal~.

* Initiate Types

# Why?
Then the function ~initTypes~ is defined to generate a series of
types, which will return an ~unordered_map~.

#+BEGIN_SRC c++ :tangle ./export/main.cpp
  unordered_map<PyTypeId, PyType*, std::hash<int> > PyTypes;
  bool verbose = false;

  unordered_map<PyTypeId, PyType*, std::hash<int> > initTypes() {

      unordered_map<PyTypeId, PyType*, std::hash<int> > types;

      PyType* typeType = new PyType("type", PyTypeType);
      types[PyTypeType] = typeType;

      PyType* noneType = new PyType("NoneType", PyNoneType);
      types[PyNoneType] = noneType;

      PyType* boolType = new PyType("bool", PyBoolType);
      types[PyBoolType] = boolType;

      PyType* intType = new PyType("int", PyIntType);
      types[PyIntType] = intType;

      PyType* floatType = new PyType("float", PyFloatType);
      types[PyFloatType] = floatType;

      PyType* strType = new PyType("str", PyStrType);
      types[PyStrType] = strType;

      PyType* functionType = new PyType("function", PyFunctionType);
      types[PyFunctionType] = functionType;

      PyType* builtinType = new PyType("builtin_function_or_method", PyBuiltInType);
      types[PyBuiltInType] = builtinType;

      PyType* rangeType = new PyRangeType("range", PyRangeTypeId);
      types[PyRangeTypeId] = rangeType;

      PyType* exceptionType = new PyExceptionType("Exception", PyExceptionTypeId);
      types[PyExceptionTypeId] = exceptionType;

      PyType* rangeIteratorType = new PyType("range_iterator", PyRangeIteratorType);
      types[PyRangeIteratorType] = rangeIteratorType;

      PyType* listType = new PyType("list", PyListType);
      types[PyListType] = listType;

      PyType* funListType = new PyType("funlist", PyFunListType);
      types[PyFunListType] = funListType;

      PyType* tupleType = new PyType("tuple", PyTupleType);
      types[PyTupleType] = tupleType;

      PyType* listIteratorType = new PyType("list_iterator", PyListIteratorType);
      types[PyListIteratorType] = listIteratorType;

      PyType* listIteratorType = new PyType("funlist_iterator", PyFunListIteratorType);
      types[PyFunListIteratorType] = listIteratorType;

      PyType* tupleIteratorType = new PyType("tuple_iterator", PyTupleIteratorType);
      types[PyTupleIteratorType] = tupleIteratorType;

      PyType* strIteratorType = new PyType("str_iterator", PyStrIteratorType);
      types[PyStrIteratorType] = strIteratorType;

      PyType* codeType = new PyType("code", PyCodeType);
      types[PyCodeType] = codeType;

      PyType* cellType = new PyType("cell", PyCellType);
      types[PyCellType] = cellType;

      return types;
  }
#+END_SRC

# TODO: Type hierarchy.

Every type is produced by the constructor of class ~PyType~ which
receive a string as ~typeString~ and a ~PyTypeId~ as id. In turn,
~PyTypeId~ is actually an ~enum~ giving each type an id. The pointer
to the constructed ~PyType~ object would be stored as value in a
~unordered~ map whose key is the corresponding ~PyTypeId~.

* Enter the ~main~ function
The main function first sets up signal handler using the function
~signal~ from ~csignal~. Then once a signal appears, the specified
signal handler would start working.

#+BEGIN_SRC c++ :tangle ./export/main.cpp
  int main(int argc, char* argv[]) {
      char* filename;

      signal(SIGABRT, sigHandler);
      signal(SIGFPE, sigHandler);
      signal(SIGILL, sigHandler);
      signal(SIGINT, sigHandler);
      signal(SIGSEGV, sigHandler);
      signal(SIGTERM, sigHandler);
#+END_SRC

The following code adds measures to parse command line arguments.

#+BEGIN_SRC c++ :tangle ./export/main.cpp
   if (argc != 2 && argc !=3) {
      cerr << "Invoke as : coco [-v] filename" << endl; // Expect 2-3 arguments.
      return 0;
   }

   PyTypes = initTypes();                 // Trigger type initializer.

   if (argc == 2)
      filename = argv[1];
   else {
       filename = argv[2];          // The last argument is the filename.
       verbose = true;              // Verbose switch on.
   }
#+END_SRC

Actually, the command line parser only cares about the number of
arguments. If the number is less than 2 or more than 3, the program
just print a usage information. And it does't care whether the first
argument is verbose switcher or not. If the ~argc~ is equal to 3, the
last argument would be recognized as a filename, and the verbose flag
would be switched on.

* Parse and Run
The procedures to parse assembly and run instructions are all
contained in a huge try-catch block.

#+BEGIN_SRC c++ :tangle ./export/main.cpp
  try {
      PyParser* parser = new PyParser(filename);

      vector<PyCode*>* code = parser->parse();

      string indent = "";           // TODO: Why?

      for (int i = 0; i < code->size(); i++) {
	  cerr << (*code)[i]->prettyString(indent, false) << endl;
	  cerr << endl;
      }

      unordered_map<string, PyObject*> globals; // Global environment is a hashmap.

      globals["print"] = new PyBuiltInPrint();
      globals["fprint"] = new PyBuiltInFPrint();
      globals["tprint"] = new PyBuiltInTPrint();
      globals["input"] = new PyBuiltInInput();
      globals["iter"] = PyTypes[PyIterType];
      globals["float"] =  PyTypes[PyFloatType];
      globals["int"] =  PyTypes[PyIntType];
      globals["str"] =  PyTypes[PyStrType];
      globals["funlist"] = PyTypes[PyFunListType];
      globals["list"] = PyTypes[PyListType];
      globals["type"] = PyTypes[PyTypeType];
      globals["bool"] = PyTypes[BoolType];
      globals["range"] = PyTypes[PyRangeTypeId];
      globals["Exception"] = PyTypes[PyExceptionTypeId];
      globals["len"] = new PyBuiltInLen();
      globals["concat"] = new PyBuiltInConcat();

      bool foundMain = false;

      for (int i = 0; i < code->size(); i++) {
	  if ((*code)[i]->getName() == "main")
	      foundMain = true;

	  globals[(*code)[i]->getName()] = new PyFunction(*((*code)[i]),
							  globals,NULL);

	  if (!foundMain) {
	      cerr << "Error: No main() function found. A main() is required in CoCo VM programs."
		   << endl;
	      return 0;
	  }

	  vector<PyObject*>* args = new vector<PyObject*>();
	  PyObject* result = globals["main"]->callMethod("__call__", args);
      } catch (PyException* ex) {
	  cerr << "\n\n";
	  cerr << "*********************************************************" << endl;
	  cerr << "            An Uncaught Exception Occurred" << endl;
	  cerr << "*********************************************************" << endl;
	  cerr << ex->toString() << endl;
	  cerr << "---------------------------------------------------------" << endl;
	  cerr << "              The Exception's Traceback" << endl;
	  cerr << "---------------------------------------------------------" << endl;
	  ex->printTraceBack();
	  cerr << "*********************************************************" << endl;
	  cerr << "            An Uncaught Exception Occurred (See Above) " << endl;
	  cerr << "*********************************************************" << endl;
	  cerr << ex->toString() << endl;
	  cerr << "*********************************************************" << endl;
      }

      return 0;
   }
#+END_SRC

Every type would be registered in the global environment hashmap. The
parser first would generate a vector of ~PyCode~ object. The assembly
code would be printed, the labels in that assembly would be replaced
with the actual address location.

The CoCo VM demands the appearance of the ~main~ function. It will
traverse all the ~PyCode~ objects to find a function named as "main".
Meanwhile all code objects would be transformed to ~PyFunction~
objects and be registered in the global environment. The catch branch
would handle all exception once a ~PyException~ object is thrown.

In summary, the main file does three things:

1. Initialize all Python types.
2. Build global environment.
3. Invoke the "main" function.

The next note about CoCo VM will analyze ~PyObject~ which are central
to this Python VM implementation. Without understanding the ~PyObject~
and its deviation the parse would be a headache.
