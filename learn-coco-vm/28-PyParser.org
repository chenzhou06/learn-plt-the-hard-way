#+TITLE: Understanding CoCo VM: ~PyParser~
#+AUTHOR: Chen Zhou

* Header file

The PyParser object parses the input file and produces an abstract syntax tree
representing the program. The abstract syntax tree is represented as a vector of
PyCode pointers.

#+BEGIN_SRC c++ :tangle ./export/PyParser.h
  #ifndef PYPARSER_H
  #define PYPARSER_H
  #include "PyScanner.h"
  #include "PyCode.h"
  #include "PyObject.h"
  #include <vector>
  #include <unordered_map>
  using namespace std;

  class PyParser {
  public:
      PyParser(string filename);
      PyParser(const pyParser& orig);
      virtual ~PyParser();
      vector<PyCode*>* parse();
  private:
      PyScanner* in;

      unordered_map<string, int> target;
      int index;

      vector<PyCode*>* PyAssemblyProg();
      vector<PyCode*>* FunctionListPart();
      vector<PyCode*>* FunctionList(vector<PyCode*>* vec);

      PyCode* FunDef();
      vector<PyObject*>* ConstPart(vector<PyCode*>* nestedFuns);
      vector<PyObject*>* ValueList(vector<PyObject*>* constants,
				   vector<PyCode*>* nestedFunctions);
      vector<PyObject*>* ValueRest(vector<PyObject*>* constants,
				   vector<PyCode*>* nestedFunctions);
      PyObject* Value(vector<PyCode*>* nestedFunctions);
      vector<string>* LocalsPart();
      vector<string>* FreeVarsPart();
      vector<string>* CellVarsPart();
      vector<string>* Idlist(vector<string>* lst);
      vector<string>* IdRest(vector<string>* lst);
      vector<string>* GlobalsPart();
      vector<PyByteCode*>* BodyPart();
      vector<PyByteCode*>* InstructionList(vector<PyByteCode*>*);
      PyByteCode* LabeledInstruction();
  };
#+END_SRC

* Grammer

PyAssemblyProg ::= FunctionListPart EOF
FunctionListPart ::= FunDef FunctionList
FunctionList ::= FunDef FunctionList | <null>
FunDef ::= Function colon Identifier slash Integer FunctionList ConstPart LocalsPart
FreeVarsPart CellVarsPart GlobalsPart BodyPart
ConstPart ::= <null> | Constants colon ValueList
ValueList ::= Value ValueRest
ValueRest ::= comma ValueList | <null>
Value ::= None | Integer | Float | String   ( the Scanner recognizes None as an Identifier )
LocalsPart ::= <null> | Locals colon IdList
FeeVarsPart ::= <null> | FreeVars colon IdList
CellVarsPart ::= <null> | CellVars colon IdList
IdList ::= Identifier IdRest
IdRest ::= comma IdList | <null>
GlobalsPart ::= <null> | Globals colon IdList
BodyPart ::= BEGIN InstructionList END
InstructionList ::= <null> | LabeledInstruction InstructionList
LabeledInstruction ::= Identifier colon LabeledInstruction | Instruction | OpInstruction
Instruction ::= STOP_CODE | NOP | POP_TOP | ROT_TWO | ROT_THREE | ...
OpInstruction ::= OpMnemonic Integer | OpMnemonic Identifier
OpMnemonic ::= LOAD_CONST | STORE_FAST | SETUP_LOOP | COMPARE_OP | POP_JUMP_IF_FALSE | ...

* Implementation

The ~badToken~ function stops the parser and prints the code which causes the
trouble.

#+BEGIN_SRC c++ :tangle ./export/PyParser.cpp
  #include "PyParser.h"
  #include "PyObject.h"
  #include "PyException.h"
  #include "PyInt.h"
  #include "PyFloat.h"
  #include "PyStr.h"
  #include "PyBool.h"
  #include "PyNone.h"
  #include "PyUtil.h"
  #include <iostream>
  #include <sstream>
  #include <stdlib.h>
  using namespace std;

  void badToken(PyToken* tok, string message) {
      cerr << "*************************************************************" << endl;
      cerr <<"                   A Parse Exception Occured" << endl;
      cerr << "Bad token '" << tok->getLex() << "' found at line "
	   << tok->getLine() << " and column " << tok->getCol() << "." << endl;
      cerr << "Token type was " << tok->getType() << "." << endl;
      cerr << message << endl;
      exit(0);
  }
#+END_SRC

** Parse

~parse~ calls ~PyAssemblyProg()~ function to do actual work. If an exception
raised, parsing stops and print debug information.

#+BEGIN_SRC c++ :tangle ./export/PyParser.cpp
  vector<PyCode*>* PyParser::parse() {
      try {
	  return PyAssemblyProg();
      } catch (PyException* ex) {
	  in->putBackToken();
	  PyToken* tok = in->getToken();
	  cerr << "*************************************************" << endl;
	  cerr << "           A Parse Exception Occurred" << endl;
	  cerr << "*************************************************" << endl;
	  cerr << "The exception occurred at line "
	       << tok->getLine() << " and column " << tok->getCol()
	       << "." << endl;
	  cerr << "The exception was: "
	       << ex->toString() << endl;
	  exit(0);
      }
  }
#+END_SRC


** PyParser

A parser can be created out of a file or another parser. When a parser is
created, a ~istream~ is assigned to ~in~ field.

#+BEGIN_SRC c++ :tangle ./export/PyParser.cpp
  PyParser::PyParser(string filename) {
      istream* stream = new ifstream(filename);
      this->in = new PyScanner(stream);
  }

  PyParser::PyParser(const PyParser& orig) {
      this->in = orig.in;
  }

  PyParser::~PyParser() {
      try {
	  delete in;
      } catch (...) {
      }
  }
#+END_SRC

** PyAssemblyProg

~PyAssemblyProg~ calls ~FunctionListPart~ to continue parsing, when finished,
the last token should be ~PYEOFTOKEN~.

#+BEGIN_SRC c++ :tangle ./export/PyParser.cpp
  vector<PyCode*>* PyParser::PyAssemblyProg() {
      vector<PyCode*>* code = FunctionListPart();

      PyToken* tok = in->getToken();

      if (tok->getType() != PYEOFTOKEN)
	  badToken(tok, "Expected End Of File Marker.");
      return code;
  }
#+END_SRC

** FunctionListPart

~FunctionListPart~ calls ~FunDef~ which generates a ~PyCode~ which again is
pushed back to an empty vector which in turn is passed ~FunctionList~ for more
processing.

#+BEGIN_SRC c++ :tangle ./export/PyParser.cpp
  vector<PyCode*>* PyParser::FunctionListPart() {
      PyCode* code = FunDef();

      vector<PyCode*>* vec = new vector<PyCode*>();

      vec->push_back(code);

      vec = FunctionList(vec);

      return vec;
  }
#+END_SRC

** FunDef



#+BEGIN_SRC c++ :tangle ./export/PyParser.cpp
  PyCode* PyParser::FunDef() {
      PyToken* tok = in->getToken();

      if (tok->getLex() != "Function")
	  badToken(tok, "Expected Function keyword.");

      tok = in->getToken();

      if (tok->getLex() != ":")
	  badToken(tok, "Expected a colon.");

      PyToken * funName = in->getToken();

      if (funName->getType() != PYIDENTIFIERTOKEN)
	  badToken(funName, "Expected an identifier.");

      tok = in->getToken();

      if (tok->getLex() != "/")
	  badToken(tok, "Expected a '/'.");

      PyToken* numArgsToken = in->getToken();
      int numArgs;

      if (numArgsToken->getType() != PYINTEGERTOKEN)
	  badToken(numArgsToken, "Expected an integer for the argument count.");

      istringstream numArgsIn(numArgsToken->getLex(), istringstream::in);
      numArgsIn.exceptions(ios_base::failbit | ios_base::badbit);
      numArgsIn >> numArgs;

      vector<PyCode*>* nestedFunctions = new vector<PyCode*>();

      nestedFunctions = FunctionList(nestedFunctions);

      vector<PyObject*>* constants = ConstPart(nestedFunctions);
      vector<string>* locals = LocalsPart();
      vector<string>* freevars = FreeVarsPart();
      vector<string>* cellvars = CellVarsPart();
      vector<string>* globals = GlobalsPart();
      vector<PyByteCode*>* instructions = BodyPart();
      return new PyCode(funName->getLex(),
			nestedFunctions,
			constants,
			locals,
			freevars,
			cellvars,
			globals,
			instructions,
			numArgs);
  }
#+END_SRC


** FunctionList

#+BEGIN_SRC c++ :tangle ./export/PyParser.cpp

  vector<PyCode*>* PyParser::FunctionList(vector<PyCode*>* vec) {
      PyToken* tok = in->getToken();
      in->putBackToken();

      if (tok->getLex() == "Function") {
	  PyCode* code = FunDef();
	  vec->push_back(code);
	  vec = FunctionList(vec);
      }
      return vec;
  }
#+END_SRC

** ConstsPart

~ConstsPart~ first check whether the token is started with "Constants" and a
colon.

#+BEGIN_SRC c++ :tangle ./export/PyParser.cpp
  vector<PyObject*>* PyParser::ConstPart(vector<PyCode*>* nestedFunctions) {
      vector<PyObject*>* constants = new vector<PyObject*>();

      PyToken* tok = in->getToken();

      if (tok->getLex() != "Constants") {
	  in->putBackToken();
	  return constants;
      }

      tok = in->getToken();
      if (tok->getLex() != ":")
	  badToken(tok, "Expected a ':'.");

      constants = ValueList(constatns, nestedFunctions);
      return constants;
  }
#+END_SRC

** ValueList

#+BEGIN_SRC c++ :tangle ./export/PyParser.cpp
  vector<PyObject*>* PyParser::ValueList(vector<PyObject*>* constatns,
					 vector<PyCode*>* nestedFunctions) {
      PyObject* value = Value(nestedFunctions);
      constants->push_back(value);
      constants = ValueRest(constatns, nestedFunctions);
      return constatns;
  }
#+END_SRC
